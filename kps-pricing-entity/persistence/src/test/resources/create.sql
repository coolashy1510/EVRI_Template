create schema pricing_entity;
create table pricing_entity.contest
(
    id         bigint generated by default as identity primary key,
    key        text,
    name       varchar                                            not null,
    status     varchar                                            not null,
    type       varchar                                            not null,
    start_date_time timestamp,
    updated_at timestamp with time zone default CURRENT_TIMESTAMP not null,

    constraint contest_status_check check (status in ('Cancelled', 'Concluded', 'InPlay', 'PreGame','Suspended')),
    constraint contest_type_check check (type in ('AlpineSkiing', 'Athletics', 'AussieRules', 'Badminton', 'Bandy', 'Baseball',
                                                  'Basketball', 'Basketball3x3', 'BeachSoccer', 'BeachVolleyball', 'Biathlon',
                                                  'Bobsleigh', 'Bowls', 'Boxing', 'Chess', 'Cricket', 'CrossCountry', 'Curling',
                                                  'Cycling', 'Darts', 'EBasketball', 'EIceHockey', 'ESoccer',
                                                  'ESportArenaOfValor', 'ESportCallOfDuty', 'ESportCounterStrike', 'ESportDota',
                                                  'ESportKingOfGlory', 'ESportLeagueOfLegends', 'ESportOverwatch',
                                                  'ESportRainbowSix', 'ESportRocketLeague', 'ESportStarCraft', 'ESportValorant',
                                                  'ESportWildRift', 'FieldHockey', 'FigureSkating', 'Floorball', 'Football',
                                                  'Formula1', 'FormulaE', 'FreestyleSkiing', 'Futsal', 'GaelicFootball',
                                                  'GaelicHurling', 'Golf', 'Greyhounds', 'Handball', 'Harness', 'Hearthstone',
                                                  'IceHockey', 'Kabaddi', 'Lacrosse', 'Luge', 'Mma', 'MotorcycleRacing',
                                                  'Netball', 'NordicCombined', 'Olympics', 'Padel', 'Pesapallo', 'Pool',
                                                  'RinkHockey', 'Rugby', 'Sailing', 'ShortTrack', 'Skeleton', 'SkiJumping',
                                                  'Snooker', 'Snowboard', 'SpeedSkating', 'Speedway', 'Squash', 'StockCarRacing',
                                                  'Surfing', 'Swimming', 'TableTennis', 'Tennis', 'Thoroughbred',
                                                  'VirtualGreyhounds', 'VirtualHarness', 'VirtualThoroughbred', 'Volleyball',
                                                  'Waterpolo')),
    constraint contest_pk primary key (id),
    constraint contest_key_unique unique (key)
);


create table pricing_entity.proposition
(
    id         bigint generated by default as identity primary key,
    key        varchar                                            not null,
    contest_id bigint                                             not null references pricing_entity.contest (id) on delete cascade,
    name       varchar                                            not null,
    type       varchar                                            not null,
    updated_at timestamp with time zone default CURRENT_TIMESTAMP not null,
    constraint proposition_pk primary key (id),
    constraint proposition_unique unique (contest_id, key)
);

create table pricing_entity.option
(
    id             bigint generated by default as identity primary key,
    proposition_id bigint                                             not null references pricing_entity.proposition (id) on delete cascade,
    key            varchar                                            not null,
    name           varchar                                            not null,
    type           varchar                                            not null,
    updated_at     timestamp with time zone default CURRENT_TIMESTAMP not null,
    constraint option_pk primary key (id),
    constraint option_unique unique (proposition_id, key)
);

create table pricing_entity.variant
(
    id             bigint generated by default as identity primary key,
    proposition_id bigint                                             not null references pricing_entity.proposition (id) on delete cascade,
    key            varchar                                            not null,
    name           varchar                                            not null,
    type           varchar                                            not null,
    updated_at     timestamp with time zone default CURRENT_TIMESTAMP not null,
    constraint variant_pk primary key (id),
    constraint variant_unique unique (proposition_id, key)
);

create table pricing_entity.price
(
    id             bigint generated by default as identity primary key,
    proposition_id bigint references pricing_entity.proposition (id) on delete cascade,
    option_id      bigint references pricing_entity.option (id) on delete no action,
    variant_id     bigint references pricing_entity.variant (id) on delete no action,
    price          numeric,
    updated_at     timestamp with time zone default CURRENT_TIMESTAMP not null,

    constraint price_pk primary key (id),
    constraint price_unique unique (proposition_id, option_id, variant_id),
    constraint price_variant_id_fkey foreign key (variant_id) references pricing_entity.variant (id) on delete cascade,
    constraint price_option_id_fkey foreign key (option_id) references pricing_entity.option (id) on delete cascade
);

create table pricing_entity.outcome
(
    id                 bigint generated by default as identity primary key,
    proposition_id     bigint references pricing_entity.proposition (id) on delete cascade,
    option_id          bigint references pricing_entity.option (id) on delete no action,
    variant_id         bigint references pricing_entity.variant (id) on delete no action,
    refund_numerator   integer,
    refund_denominator integer,
    win_numerator      integer,
    win_denominator    integer,
    constraint outcome_pk primary key (id),
    constraint outcome_unique unique (proposition_id, option_id, variant_id),
    constraint outcome_variant_id_fkey foreign key (variant_id) references pricing_entity.variant (id) on delete cascade,
    constraint outcome_option_id_fkey foreign key (option_id) references pricing_entity.option (id) on delete cascade
);

create table pricing_entity.proposition_placeholder
(
    id             bigint generated by default as identity primary key,
    name           text   not null,
    value          text   not null,
    proposition_id bigint not null references pricing_entity.proposition (id) on delete cascade,

    constraint proposition_placeholder_pk primary key (id)
);

CREATE TABLE pricing_entity.archived_contest
(
    id         bigint                                             not null,
    key        text,
    name       varchar                                            not null,
    status     varchar                                            not null,
    type       varchar                                            not null,
    updated_at timestamp with time zone default current_timestamp not null,
    start_date_time timestamp,
    constraint archived_contest_pk primary key (id)
);

create table pricing_entity.archived_option
(
    id             bigint                                             not null,
    proposition_id bigint                                             not null,
    key            varchar                                            not null,
    name           varchar                                            not null,
    type           varchar                                            not null,
    updated_at     timestamp with time zone default current_timestamp not null,
    constraint archived_option_pk primary key (id)
);

create table pricing_entity.archived_price
(
    id             bigint                                             not null,
    proposition_id bigint,
    option_id      bigint,
    variant_id     bigint,
    price          numeric,
    updated_at     timestamp with time zone default current_timestamp not null,
    constraint archived_price_pk primary key (id)
);

create table pricing_entity.archived_proposition
(
    id         bigint                                             not null,
    key        varchar                                            not null,
    contest_id bigint                                             not null,
    name       varchar                                            not null,
    type       varchar                                            not null,
    updated_at timestamp with time zone default current_timestamp not null,
    constraint archived_proposition_pk primary key (id)
);

create table pricing_entity.archived_proposition_placeholder
(
    id             bigint not null,
    name           text   not null,
    value          text   not null,
    proposition_id bigint not null,
    constraint archived_proposition_placeholder_pk primary key (id)
);

create table pricing_entity.archived_variant
(
    id             bigint                                             not null,
    proposition_id bigint                                             not null,
    key            varchar                                            not null,
    name           varchar                                            not null,
    type           varchar                                            not null,
    updated_at     timestamp with time zone default current_timestamp not null,
    constraint archived_variant_pk primary key (id)
);

create table pricing_entity.archived_outcome
(
    id                 bigint not null,
    proposition_id     bigint not null,
    option_id          bigint not null,
    variant_id         bigint not null,
    refund_numerator   integer not null,
    refund_denominator integer not null,
    win_numerator      integer not null,
    win_denominator    integer not null,
    constraint archive_outcome_pk primary key (id)
);

create table pricing_entity.option_entity
(
    id        bigint generated by default as identity primary key,
    key       text   not null,
    type      text   not null,
    option_id bigint not null references pricing_entity.option (id) on delete cascade,

    constraint option_entity_pk primary key (id),
    constraint option_entity_unique unique (option_id, key)
);